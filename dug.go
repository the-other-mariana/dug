package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strings"

	"github.com/joho/godotenv"
)

func FilterByType(data []map[string]interface{}, fileType string) []string {
	items := []string{}
	for i := 0; i < len(data); i++ {
		t := fmt.Sprintf("%v", data[i]["type"])
		if strings.Contains(t, fileType) {
			name := fmt.Sprintf("%v", data[i]["name"])
			items = append(items, name)
		}
	}
	return items
}

func ListRepoPathContent(gitToken, user, repo, path string) []map[string]interface{} {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer <YOUR_TOKEN>" https://api.github.com/repos/[user_name]/[repo_name]/contents/[path]

	url := fmt.Sprintf("https://api.github.com/repos/%v/%v/contents/%v", user, repo, path)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal("Error at http request")
	}

	bearer := fmt.Sprintf("Bearer %v", gitToken)
	req.Header.Set("Accept", "application/vnd.github+json")
	req.Header.Set("Authorization", bearer)

	resp, err := http.DefaultClient.Do(req)
	defer resp.Body.Close()
	if err != nil {
		log.Fatal("Error at curl request")
	}
	var data []map[string]interface{}
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal([]byte(body), &data)
	if err != nil {
		log.Fatal("Error at parsing json response")
		panic(err)
	}

	return data
}

func DownloadSingleFile(fullPath string) {
	fetchUrl := fmt.Sprintf("https://%v@raw.githubusercontent.com/%v/%v/%v/%v/%v", gitToken, user, repo, branch, repo_path, fullPath)
	fmt.Printf("%v\n", fullPath)
	args := []string{fetchUrl, "-o", fullPath}
	_, err := exec.Command("curl", args...).Output()
	if err != nil {
		log.Fatal("Error at curl command")
		log.Fatal(err)
	}
}

func DownloadFile(file string) {
	fmt.Println("Download? [y/n]:")
	var download string
	fmt.Scanln(&download)
	if download == "y" {
		fmt.Println("Downloading...")
		DownloadSingleFile(file)
	}
}

func DownloadFolder(folder string) {
	optFolder := fmt.Sprintf("%v/%v", repo_path, folder)
	fileParts := ListRepoPathContent(gitToken, user, repo, optFolder)
	fmt.Printf("Items found in folder: %v\n", len(fileParts))
	fmt.Println("Download? [y/n]:")
	var download string
	fmt.Scanln(&download)
	if download == "y" {
		fmt.Println("Downloading...")
		// download happens here
		_ = os.Mkdir(folder, os.ModePerm)
		// curl https://<YOUR_TOKEN>@raw.githubusercontent.com/[user_name]/[repo_name]/[branch]/[repo_path]/[folders[opt-1]]/[fileParts[*]] -o [OUT_FOLDER]/[fileParts[*]]
		for f := 0; f < len(fileParts); f++ {
			fullPath := fmt.Sprintf("%v/%v", folder, fileParts[f]["name"])
			DownloadSingleFile(fullPath)
		}
		fmt.Printf("Downloaded files at: ./%v\n", folder)
		fmt.Println("Merge? [y/n]:")
		var merge string
		fmt.Scanln(&merge)
		if merge == "y" {
			// merging happens here
			merged_file := fmt.Sprintf("%v.%v", folder, extension)
			args := []string{"-a", "merge", "-i", folder, "-f", merged_file}
			_, err := exec.Command("cylf", args...).Output()
			if err != nil {
				log.Fatal("Error at cylf merge command")
				log.Fatal(err)
			}
			fmt.Println("Done.")
			fmt.Printf("Merged file: %v-merged.%v\n", folder, extension)
			os.RemoveAll(fmt.Sprintf("/%v/", folder))
		} else {
			fmt.Println("Bye")
		}
	} else {
		fmt.Println("Bye")
	}
}

var (
	gitToken  string
	user      string
	repo      string
	repo_path string
	branch    string
	extension string
)

func Init() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	gitToken = os.Getenv("GITHUB_ACCESS_TOKEN")
	user = os.Getenv("GITHUB_USER")
	repo = os.Getenv("GITHUB_REPOSITORY")
	repo_path = os.Getenv("REPO_PATH")
	repo_path = strings.Replace(repo_path, "/", "", -1)
	branch = os.Getenv("REPO_BRANCH")
	extension = os.Getenv("MERGE_EXTENSION")
	fmt.Println("Env Variables")
	fmt.Println("---------------------------------------------------------------------------")
	fmt.Printf("user: %v repo: %v path: %v branch: %v extension: %v\n", user, repo, repo_path, branch, extension)
	fmt.Println("---------------------------------------------------------------------------")
}

func main() {

	Init()
	data := ListRepoPathContent(gitToken, user, repo, repo_path)
	fmt.Printf("Choose what you want to download:\n1. Files \n2. Folders\n")
	var action int
	_, err := fmt.Scanf("%d", &action)
	if err != nil {
		fmt.Println("[ERROR] You must enter a choice")
	}
	var items []string
	if action == 1 {
		items = FilterByType(data, "file")
	} else if action == 2 {
		items = FilterByType(data, "dir")
	}

	fmt.Printf("Items found: %v\n", len(items))
	fmt.Println("Choose the item:")

	for i := 0; i < len(items); i++ {
		fmt.Printf("%v. %v\n", (i + 1), items[i])
	}
	var opt int
	_, err = fmt.Scanf("%d", &opt)
	if err != nil {
		log.Fatal("Error at user input")
		panic(err)
	}
	if action == 2 {
		DownloadFolder(items[opt-1])
	} else {
		DownloadFile(items[opt-1])
	}

}

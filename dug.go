package main

import (
	"github.com/joho/godotenv"
	"os"
	"fmt"
	"log"
	"net/http"
	"encoding/json"
	"io/ioutil"
)

func main(){
	err := godotenv.Load()
  	if err != nil {
    	log.Fatal("Error loading .env file")
  	}
	gitToken := os.Getenv("GITHUB_ACCESS_TOKEN")
	//user := os.Getenv("GITHUB_USER")
	//repo := os.Getenv("GITHUB_REPOSITORY")

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer <TOKEN>" https://api.github.com/user/repos?per_page=100

	// github allows paging for results, where per page limit is 100 results
	req, err := http.NewRequest("GET", "https://api.github.com/user/repos?per_page=100", nil)
	if err != nil {
		// handle err
	}

	bearer := fmt.Sprintf("Bearer %v", gitToken)
	req.Header.Set("Accept", "application/vnd.github+json")
	req.Header.Set("Authorization", bearer)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		log.Fatal("Error curl request")
	}
	var data []map[string]interface{}
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal([]byte(body), &data)
	if err != nil {
		panic(err)
	}
	fmt.Printf("%v", len(data))
	for i := 0; i < len(data); i++ {
		if data[i]["private"] == true {
			fmt.Printf("%v\n", data[i]["full_name"])
		}
	}
	defer resp.Body.Close()

}
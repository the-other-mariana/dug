package main

import (
	"github.com/joho/godotenv"
	"os"
	"fmt"
	"log"
	"net/http"
	"encoding/json"
	"io/ioutil"
	"strings"
	"os/exec"
)

func filterFoldersOnly(data []map[string]interface{}) []string {
	folders := []string{}
	for i := 0; i < len(data); i++ {
		name := fmt.Sprintf("%v", data[i]["name"])
		if !strings.Contains(name, "."){
			folders = append(folders, name)
		}
	} 
	return folders
}

func listRepoPathContent(gitToken, user, repo, path string) []map[string]interface{} {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer <YOUR_TOKEN>" https://api.github.com/repos/[user_name]/[repo_name]/contents/[path]

	url := fmt.Sprintf("https://api.github.com/repos/%v/%v/contents/%v", user, repo, path)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal("Error at http request")
	}

	bearer := fmt.Sprintf("Bearer %v", gitToken)
	req.Header.Set("Accept", "application/vnd.github+json")
	req.Header.Set("Authorization", bearer)

	resp, err := http.DefaultClient.Do(req)
	defer resp.Body.Close()
	if err != nil {
		log.Fatal("Error at curl request")
	}
	var data []map[string]interface{}
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal([]byte(body), &data)
	if err != nil {
		log.Fatal("Error at parsing json response")
		panic(err)
	}

	return data
}

func main(){
	err := godotenv.Load()
  	if err != nil {
    	log.Fatal("Error loading .env file")
  	}
	gitToken := os.Getenv("GITHUB_ACCESS_TOKEN")
	user := os.Getenv("GITHUB_USER")
	repo := os.Getenv("GITHUB_REPOSITORY")
	repo_path := os.Getenv("REPO_PATH")
	branch := os.Getenv("REPO_BRANCH")
	extension := os.Getenv("MERGE_EXTENSION")

	data := listRepoPathContent(gitToken, user, repo, repo_path)
	folders := filterFoldersOnly(data)
	fmt.Printf("Files found: %v\n", len(folders))
	fmt.Println("Choose the folder:")
	
	for i := 0; i < len(folders); i++ {
		fmt.Printf("%v. %v\n", (i+1), folders[i])
	}
	var opt int
	_, err = fmt.Scanf("%d", &opt)
	if err != nil {
		log.Fatal("Error at user input")
		panic(err)
	}
	optFolder := fmt.Sprintf("%v/%v", repo_path, folders[opt-1])
	fileParts := listRepoPathContent(gitToken, user, repo, optFolder)
	fmt.Printf("Files parts: %v\n", len(fileParts))
	fmt.Println("Download? [y/n]:")
	var download string
	fmt.Scanln(&download)
	if download == "y" {
		fmt.Println("Downloading...")
		// download happens here
		_ = os.Mkdir(folders[opt-1], os.ModePerm)
		// curl https://<YOUR_TOKEN>@raw.githubusercontent.com/[user_name]/[repo_name]/[branch]/[repo_path]/[folders[opt-1]]/[fileParts[*]] -o [OUT_FOLDER]/[fileParts[*]]
		for f := 0; f < len(fileParts); f++ {
			fetchUrl := fmt.Sprintf("https://%v@raw.githubusercontent.com/%v/%v/%v/%v/%v/%v", gitToken, user, repo, branch, repo_path, folders[opt-1], fileParts[f]["name"])
			outPath := fmt.Sprintf("%v/%v", folders[opt-1], fileParts[f]["name"])
			fmt.Printf("%v\n", outPath)
			args := []string{fetchUrl, "-o", outPath}
			_, err := exec.Command("curl", args...).Output()
			if err != nil {
				log.Fatal("Error at curl command")
				log.Fatal(err)
			}
		}
		fmt.Printf("Downloaded files at: ./%v\n", folders[opt-1])
		fmt.Println("Merge? [y/n]:")
		var merge string
		fmt.Scanln(&merge)
		if merge == "y"{
			// merging happens here
			merged_file := fmt.Sprintf("%v.%v", folders[opt-1], extension)
			args := []string{"-a", "merge", "-i", folders[opt-1], "-f", merged_file}
			_, err := exec.Command("cylf", args...).Output()
			if err != nil {
				log.Fatal("Error at cylf merge command")
				log.Fatal(err)
			}
			fmt.Println("Done.")
			fmt.Printf("Merged file: %v-merged.%v\n", folders[opt-1], extension)
			os.RemoveAll(fmt.Sprintf("/%v/", folders[opt-1]))
		} else {
			fmt.Println("Bye")
		}
	} else {
		fmt.Println("Bye")
	}
}
package main

import (
	"github.com/joho/godotenv"
	"os"
	"fmt"
	"log"
	"net/http"
	"encoding/json"
	"io/ioutil"
	"strings"
)

func filterFoldersOnly(data []map[string]interface{}) []string {
	folders := []string{}
	for i := 0; i < len(data); i++ {
		name := fmt.Sprintf("%v", data[i]["name"])
		if !strings.Contains(name, "."){
			folders = append(folders, name)
		}
	} 
	return folders
}

func listRepoPathContent(gitToken, user, repo, path string) []map[string]interface{} {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer <YOUR_TOKEN>" https://api.github.com/repos/[user_name]/[repo_name]/contents/[path]

	url := fmt.Sprintf("https://api.github.com/repos/%v/%v/contents/%v", user, repo, path)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Fatal("Error at http request")
	}

	bearer := fmt.Sprintf("Bearer %v", gitToken)
	req.Header.Set("Accept", "application/vnd.github+json")
	req.Header.Set("Authorization", bearer)

	resp, err := http.DefaultClient.Do(req)
	defer resp.Body.Close()
	if err != nil {
		log.Fatal("Error at curl request")
	}
	var data []map[string]interface{}
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal([]byte(body), &data)
	if err != nil {
		log.Fatal("Error at parsing json response")
		panic(err)
	}

	return data
}

func main(){
	err := godotenv.Load()
  	if err != nil {
    	log.Fatal("Error loading .env file")
  	}
	gitToken := os.Getenv("GITHUB_ACCESS_TOKEN")
	user := os.Getenv("GITHUB_USER")
	repo := os.Getenv("GITHUB_REPOSITORY")
	repo_path := os.Getenv("REPO_PATH")

	data := listRepoPathContent(gitToken, user, repo, repo_path)
	folders := filterFoldersOnly(data)
	fmt.Printf("Files found: %v\n", len(folders))
	fmt.Println("Choose the folder:")
	
	for i := 0; i < len(folders); i++ {
		fmt.Printf("%v. %v\n", (i+1), folders[i])
	}
	var opt int
	_, err = fmt.Scanf("%d", &opt)
	if err != nil {
		log.Fatal("Error at user input")
		panic(err)
	}
	optFolder := fmt.Sprintf("%v/%v", repo_path, folders[opt-1])
	fileParts := listRepoPathContent(gitToken, user, repo, optFolder)
	fmt.Printf("Files parts: %v\n", len(fileParts))
	fmt.Println("Download and merge? [y/n]:")
	var proceed string
	fmt.Scanln(&proceed)
	if proceed == "y" {
		fmt.Println("Downloading & merging")
	}
}